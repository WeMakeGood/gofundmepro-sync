# Classy Sync Environment Configuration
# Copy this file to .env and update with your actual values

# ===========================================
# DATABASE CONFIGURATION
# ===========================================

# Database type: sqlite, mysql2, or pg (PostgreSQL)
DB_TYPE=sqlite

# SQLite Configuration (Development)
# No additional settings needed - uses ./data/dev_database.sqlite

# MySQL Configuration (Production)
# Uncomment and configure for MySQL
# DB_HOST=localhost
# DB_PORT=3306
# DB_USER=your_mysql_user
# DB_PASSWORD=your_mysql_password
# DB_NAME=classy_sync

# PostgreSQL Configuration (Alternative Production)
# Uncomment and configure for PostgreSQL
# DB_HOST=localhost
# DB_PORT=5432
# DB_USER=your_postgres_user
# DB_PASSWORD=your_postgres_password
# DB_NAME=classy_sync

# ===========================================
# APPLICATION CONFIGURATION
# ===========================================

# Environment: development, production, test
NODE_ENV=development

# Logging level: error, warn, info, debug
LOG_LEVEL=info

# ===========================================
# ENCRYPTION CONFIGURATION
# ===========================================

# Encryption key for storing Classy credentials securely
# IMPORTANT: Generate a strong 32-character key and keep it secret
# You can generate one with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY=your_32_character_encryption_key_here

# ===========================================
# MAILCHIMP INTEGRATION (Optional)
# ===========================================

# MailChimp API credentials (for plugin)
# MAILCHIMP_API_KEY=your_mailchimp_api_key
# MAILCHIMP_SERVER_PREFIX=us1
# MAILCHIMP_LIST_ID=your_default_list_id

# ===========================================
# VALIDATION TESTING (Development Only)
# ===========================================

# Test limits for validation scripts
TEST_LIMIT=5

# ===========================================
# CLASSY API CONFIGURATION
# ===========================================

# NOTE: Classy credentials are NOT stored in .env files
# They are stored encrypted in the database per organization
# Use the CLI to manage organizations and their credentials:
#
# Add new organization:
#   npm run org:add
#
# List organizations:
#   npm run org:list
#
# Sync specific organization:
#   npm run org:sync <organization-id>

# ===========================================
# SECURITY NOTES
# ===========================================

# 1. Never commit actual credentials to version control
# 2. Keep your ENCRYPTION_KEY secure and backed up
# 3. Use different encryption keys for different environments
# 4. Classy credentials are stored encrypted in the database only
# 5. Rotate encryption keys periodically in production